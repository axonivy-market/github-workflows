name: Dev-Build

on: 
  workflow_call:
    inputs:
      mvnArgs:
        type: string
        required: false
      ivyVersion:
        type: string
        default: dev
        description: the ivy version to use (e.g. dev/nightly/nightly-10/...)
      latestIvyVersion:
        type: string
        default: 13.2.0
        description: the latest ivy version to use
      javaVersion:
        type: string
        default: 21
      mvnVersion:
        type: string
        default: 3.9.8
      ivyPluginVersion:
        type: string
        default: 13.2.0-SNAPSHOT
      testerVersion:
        type: string
        default: 13.2.0-SNAPSHOT
    secrets:
      mvnArgs:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.javaVersion }}
        distribution: temurin

    - name: Setup Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.mvnVersion }}

    - name: Convert to lastest Ivy version
      run: |
        engineUrl="https://dev.axonivy.com/permalink/${{ inputs.ivyVersion }}/axonivy-engine.zip"
        IVY_JAVA_HOME=$JAVA_HOME_21_X64
        echo "workDir=$(pwd)" >> $GITHUB_ENV
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        if [ -z "$workDir" ]; then
          workDir=$(mktemp -d -t projectConvertXXX)
        fi

        if [ -z "$gitDir" ]; then
          gitDir="$DIR/repos"
          echo $(mkdir -v -p $DIR/repos)
        fi

        if ! [ -d "${workDir}/engine" ]; then
          echo "Downloading engine from ${engineUrl}"
          (cd "$workDir" && curl --progress-bar -L -O "${engineUrl}") 
          zipped=$(find "${workDir}" -maxdepth 1 -name "*.zip")
          unzip -qq "${zipped}" -d "${workDir}/engine"
          rm "${zipped}"
        fi

        gitDir=$(pwd)
        gitName=$(basename ${gitDir})
        echo "Searching projects in ${gitDir}"
        projects=()
        for ivyPref in $(find ${gitDir} -name "ch.ivyteam.ivy.designer.prefs"); do
          project=$(dirname $(dirname $ivyPref))
          if ! [ -f "${project}/pom.xml" ]; then
            continue # prefs file not in natural project structure
          fi
          projects+=("${project}")
        done

        if [ ${#projects[@]} -gt 0 ]; then
          echo "Collected projects: ${projects[@]}"
          ${workDir}/engine/bin/EngineConfigCli migrate-project ${projects[@]}
        else
          echo "No projects found in ${gitDir}"
        fi

        mvn -B versions:set-property versions:commit "-Dproperty=project.build.plugin.version" "-DnewVersion=${{ inputs.ivyPluginVersion }}" -DallowSnapshots=true -DprocessAllModules
        mvn -B versions:set-property versions:commit "-Dproperty=tester.version" "-DnewVersion=${{ inputs.testerVersion }}" -DallowSnapshots=true -DprocessAllModules

        # if root pom.xml exists
        if [ -f "pom.xml" ]; then
          mvn -B versions:set -DnewVersion=${{ inputs.latestIvyVersion }} -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -B versions:use-latest-versions -DgenerateBackupPoms=false -DprocessAllModules
        fi
        # update version in pom.xml
        # loop through all folders
        for d in */ ; do
          echo "Updating $d"
          mvn -f $d -B versions:set -DnewVersion=${{ inputs.latestIvyVersion }} -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -f $d -B versions:use-latest-versions -DgenerateBackupPoms=false -DprocessAllModules
        done

    - name: Build with Maven
      run: mvn clean verify --batch-mode --fail-at-end "-Divy.engine.download.url=https://dev.axonivy.com/permalink/${{ inputs.ivyVersion }}/axonivy-engine.zip" "-Divy.engine.version=(12.0.0,]" "-Dproject.build.plugin.version=${{ inputs.ivyPluginVersion }}" "-Dtester.version=${{ inputs.testerVersion }}" ${{ inputs.mvnArgs }} ${{ secrets.mvnArgs }}

    - name: Check if test results exist
      id: check_test_files
      run: |
        if [[ "${{ hashFiles('**/target/*-reports/*.xml') }}" != "" ]]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Remove test summary files
      if: steps.check_test_files.outputs.exists == 'true'
      run: rm -f **/target/*-reports/*-summary.xml

    - name: Publish Unit Test Results
      id: test_report
      uses: dorny/test-reporter@v1.9.1
      if: steps.check_test_files.outputs.exists == 'true'
      with:
        name: JUnit Test Results
        reporter: java-junit
        path: '**/target/*-reports/*.xml'

    - name: Export test results to json file
      if: steps.check_test_files.outputs.exists == 'true'
      run: |
        response=$(curl ${{ steps.test_report.outputs.url }})
        echo $response > test_report.json

    - name: Archive test json file
      uses: actions/upload-artifact@v4
      if: steps.check_test_files.outputs.exists == 'true'
      with:
        name: export-test-json-file
        retention-days: 5
        path: 'test_report.json'

    - name: Archive build artifact
      uses: actions/upload-artifact@v4
      with:
        path: |
          */target/*.iar
          */target/*-[0-9]*.jar
          *product/target/*.zip

    - name: Archive test reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-reports
        retention-days: 5
        path: |
          */target/testEngineOut.log
          */target/selenide/*
          */target/ivyEngine/deploy/*/*.deploymentLog
